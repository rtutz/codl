generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  UserClassMap  UserClassMap[]
  UserLessonMap UserLessonMap[]
}

model UserClassMap {
  userID  String
  classID String
  role    Role
  class   Class  @relation(fields: [classID], references: [id])
  user    User   @relation(fields: [userID], references: [id])

  @@id([userID, classID])
}

model Class {
  id           String         @id
  name         String
  lessons      Lesson[]
  UserClassMap UserClassMap[]
}

model UserLessonMap {
  userID    String
  lessonID  String
  submitted Boolean
  lesson    Lesson  @relation(fields: [lessonID], references: [id])
  user      User    @relation(fields: [userID], references: [id])

  @@id([userID, lessonID])
}

model Lesson {
  id             String          @id @unique @default(dbgenerated("gen_random_uuid()"))
  name           String
  classId        String
  published      Boolean
  lectureContent String
  dueDate        DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  class          Class           @relation(fields: [classId], references: [id])
  quizzes        Quiz[]
  testCases      TestCases[]
  UserLessonMap  UserLessonMap[]
}

model Quiz {
  id       Int    @id @default(autoincrement())
  question String
  choices  String
  answer   String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model TestCases {
  id       Int    @id @default(autoincrement())
  input    String
  output   String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  TEACHER
  STUDENT
}
