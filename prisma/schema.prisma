generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  name               String?
  createdAt          DateTime        @default(now())
  emailVerified      DateTime?
  image              String?
  updatedAt          DateTime        @updatedAt
  accounts           Account[]
  sessions           Session[]
  UserClassMap       UserClassMap[]
  ModelUserCodingMap UserCodingMap[]
  UserLessonMap      UserLessonMap[]
}

model UserClassMap {
  userID  String
  classID String
  role    Role
  class   Class  @relation(fields: [classID], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@id([userID, classID])
}

model Class {
  id           String         @id
  name         String
  lessons      Lesson[]
  UserClassMap UserClassMap[]
}

model UserLessonMap {
  userID    String
  lessonID  String
  submitted Boolean
  lesson    Lesson  @relation(fields: [lessonID], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@id([userID, lessonID])
}

model Lesson {
  id             String           @id @unique @default(dbgenerated("gen_random_uuid()"))
  classId        String
  published      Boolean          @default(false)
  lectureContent String           @default("")
  dueDate        DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  name           String
  CodingQuestion CodingQuestion[]
  class          Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  quizzes        Quiz[]
  UserLessonMap  UserLessonMap[]
}

model Quiz {
  question String
  lessonId String
  hint     String?
  id       Int      @id @default(autoincrement())
  choices  Choice[]
  lesson   Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Choice {
  id         Int     @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  questionId Int
  question   Quiz    @relation(fields: [questionId], references: [id])
}

model CodingQuestion {
  id                 String          @id @unique @default(dbgenerated("gen_random_uuid()"))
  lessonId           String
  markdown           String
  lesson             Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  TestCases          TestCases[]
  ModelUserCodingMap UserCodingMap[]
}

model TestCases {
  id               String         @id @unique @default(dbgenerated("gen_random_uuid()"))
  input            String
  output           String
  codingQuestionId String
  codingQuestion   CodingQuestion @relation(fields: [codingQuestionId], references: [id], onDelete: Cascade)
}

model UserCodingMap {
  id               String         @id @unique @default(dbgenerated("gen_random_uuid()"))
  userId           String
  codingQuestionId String
  value            String
  codingQuestion   CodingQuestion @relation(fields: [codingQuestionId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@unique([userId, codingQuestionId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  TEACHER
  STUDENT
}
