datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserClassMap  UserClassMap[]
  UserLessonMap UserLessonMap[]
}

// Many to many relation between users and class
// NOTE: A user must have a role in that class
model UserClassMap {
  user    User   @relation(fields: [userID], references: [id])
  userID  String
  class   Class  @relation(fields: [classID], references: [id])
  classID Int

  role Role

  @@id([userID, classID])
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String
  lessons      Lesson[]
  UserClassMap UserClassMap[]
}

model UserLessonMap {
  user     User   @relation(fields: [userID], references: [id])
  userID   String
  lesson   Lesson @relation(fields: [lessonID], references: [id])
  lessonID String

  // Extra info 
  submitted Boolean

  @@id([userID, lessonID])
}

model Lesson {
  id             String      @id @default(cuid())
  lectureContent String
  class          Class       @relation(fields: [classId], references: [id])
  published      Boolean
  classId        Int
  testCases      TestCases[]
  quizzes        Quiz[]

  dueDate       DateTime        @updatedAt
  UserLessonMap UserLessonMap[]
}

model Quiz {
  id       Int    @id @default(autoincrement())
  question String
  choices  String
  answer   String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String
}

model TestCases {
  id       Int    @id @default(autoincrement())
  input    String
  output   String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  TEACHER
  STUDENT
}
